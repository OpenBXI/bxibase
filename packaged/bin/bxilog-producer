#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
@author BXIHL <bxihl@atos.net>

@copyright 2016  Bull S.A.S.  -  All rights reserved.
           This is not Free or Open Source software.
           Please contact Bull SAS for details about its license.
           Bull - Rue Jean JaurÃ¨s - B.P. 68 - 78340 Les Clayes-sous-Bois

Generate fake BXI logs (for debugging purpose)
"""

import time
import random
import warnings
import bxi.base.log as logging
import bxi.base.posless as posless
import bxi.base.parserconf as bxiparserconf

LEVELS = xrange(logging.OFF, logging.LOWEST + 1)
KINDS = ['singleline', 'singleline', 'singleline', 'singleline',
         'singleline', 'singleline', 'singleline', 'singleline',
         'multiline', 'multiline', 'multiline', 'multiline',
         'warning', 'warning', 'warning',
         'exception', 'exception']
LOGGERS = ['', 'org', 'com', 'edu',
           'org.linux', 'org.wiki', 'org.other', 'com.acme', 'com.stuff', 'edu.it',
           'org.linux.www', 'org.linux.nfs', 'org.wiki.www', 'org.wiki.ldap',
           'org.other.www', 'com.acme.www', 'com.acme.nfs', 'com.stuff.ldap',
           'edu.it.nfs']

###############################################################################
def __main__():
    formatter = bxiparserconf.RawDescriptionFilteredHelpFormatter
    parser = posless.ArgumentParser(docstring=__doc__,
                                    formatter_class=formatter)
    bxiparserconf.addargs(parser, domain_name='bxilog')
    parser.add_argument("--time", type=float, default=float('inf'),
                        help="Number of seconds during which to produce logs"
                        " ('inf' means infinity). Default: %(default)s")
    parser.add_argument("--max-delay-s", type=float, default=0,
                        help="How many time should we wait maximum between two logs."
                        " Default: %(default)s")

    args = parser.parse_args()

    level_names = logging.LEVEL_NAMES

    start = time.time()
    while True:
        now = time.time()
        if now - start > args.time:
            logging.out("Elapsed time: %s", now - start)
            break
        level = random.choice(LEVELS)
        kind = random.choice(KINDS)
        logger = logging.get_logger(random.choice(LOGGERS))
        if kind is 'singleline':
            logger.log(level, "A logging message at level %s", level_names[level])
        elif kind is 'multiline':
            logger.log(level,
                       "A multiline logging message at level %s;\n"
                       "this is the second line;\n"
                       "and this is the third",
                       level_names[level])
        elif kind is 'warning':
            warnings.warn("This is a Python standard call to warnings.warn()")
        elif kind is 'exception':
            try:
                raise Exception("This is a dummy exception")
            except Exception:  # pylint: disable=locally-disabled, broad-except
                logger.exception("Just checking bxilog, everything is normal, "
                                 "don't worry")
        time.sleep(args.max_delay_s)

if __name__ == "__main__":
    __main__()
