#!/usr/bin/env python
# -*- coding: utf-8 -*-
# pylint: disable=locally-disabled, invalid-name
"""
@file bxilog-producer
@authors Pierre Vignéras <pierre.vigneras@bull.net>
@copyright 2013  Bull S.A.S.  -  All rights reserved.\n
           This is not Free or Open Source software.\n
           Please contact Bull SAS for details about its license.\n
           Bull - Rue Jean Jaurès - B.P. 68 - 78340 Les Clayes-sous-Bois
@namespace bxilog-producer Produce various logging message (use for testing bxilog)

"""

import bxi.base.log as logging
import bxi.base.posless as posless
import bxi.base.parserconf as bxiparserconf
import time
import random
import warnings

levels = xrange(logging.OFF, logging.LOWEST + 1)
kinds = ['singleline', 'singleline', 'singleline', 'singleline',
         'singleline', 'singleline', 'singleline', 'singleline',
         'multiline', 'multiline', 'multiline', 'multiline',
         'warning', 'warning', 'warning',
         'exception', 'exception']
loggers = ['', 'org', 'com', 'edu',
           'org.linux', 'org.wiki', 'org.other', 'com.acme', 'com.stuff', 'edu.it',
           'org.linux.www', 'org.linux.nfs', 'org.wiki.www', 'org.wiki.ldap',
           'org.other.www', 'com.acme.www', 'com.acme.nfs', 'com.stuff.ldap',
           'edu.it.nfs']

###############################################################################
if __name__ == '__main__':

    parser = posless.ArgumentParser(description='BXI Log Producer',
                                    formatter_class=bxiparserconf.FilteredHelpFormatter)
    bxiparserconf.addargs(parser, domain_name='bxilog')
    parser.add_argument("--time", type=float, default=float('inf'),
                        help="How many time should we produce logs in seconds"
                        " ('inf' means infinity). Default: %(default)s")
    parser.add_argument("--max-delay-s", type=float, default=0,
                        help="How many time should we wait maximum between two logs."
                        " Default: %(default)s")

    args = parser.parse_args()

    level_names = logging.LEVEL_NAMES

    start = time.time()
    while True:
        now = time.time()
        if now - start > args.time:
            logging.out("Elapsed time: %s", now - start)
            break
        level = random.choice(levels)
        kind = random.choice(kinds)
        logger = logging.get_logger(random.choice(loggers))
        if kind is 'singleline':
            logger.log(level, "A logging message at level %s", level_names[level])
        elif kind is 'multiline':
            logger.log(level,
                       "A multiline logging message at level %s;\n"
                       "this is the second line;\n"
                       "and this is the third",
                       level_names[level])
        elif kind is 'warning':
            warnings.warn("This is a Python standard call to warnings.warn()")
        elif kind is 'exception':
            try:
                raise Exception("This is a dummy exception")
            except Exception:  # pylint: disable=locally-disabled, broad-except
                logger.exception("Just checking bxilog, everything is normal, "
                                 "don't worry")
        time.sleep(args.max_delay_s)
