#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
@copyright 2016  Bull S.A.S.  -  All rights reserved.
           This is not Free or Open Source software.
           Please contact Bull SAS for details about its license.
           Bull - Rue Jean Jaur√®s - B.P. 68 - 78340 Les Clayes-sous-Bois

@namespace bxilog-console Monitoring console of a bxilog process

BXI log console
"""

import time
import zmq

import bxi.base.log as bxilog
import bxi.base.posless as posless
import bxi.base.parserconf as bxiparserconf
import bxi.base.log.remote_receiver as remote_receiver


def _connect(args):
    """
    Connect to the ctrl socket according to args

    @param[in] args the arguments of the command line

    @return a "monitoring" dictionary mapping url to zocket
    """
    ctx = zmq.Context.instance()
    monitoring = dict()
    for url in args.bxilog_remote_handler_url:
        zock = ctx.socket(zmq.DEALER) # Blame ZMQ, pylint: disable=no-member
        if args.bind:
            zock.bind(url)
        else:
            zock.connect(url)
        monitoring[url] = (zock, None)
    return monitoring


def _get_raw_config(monitoring):
    """
    Fetch the configuration from the given monitoring

    @param[in] monitoring the monitoring object returned by _connect().

    @return a dictionary mapping url to raw json configuration data
    """
    bxilog.info("Getting configuration of %s", monitoring.keys())

    result = dict()
    for url in monitoring:
        ctrl_zock = monitoring[url][0]
        ctrl_zock.send_string('get-config')
        data = ctrl_zock.recv_json()
        result[url] = data

    return result


def _get_config(monitoring):
    """
    Output the configuration from the given monitoring

    @param[in] monitoring the object returned by _connect()
    @param[in] args arguments from the command line parser
    """
    result = _get_raw_config(monitoring)
    for url in result:
        data = result[url]
        global_ = data['global']
        bxilog.output("%s: %s", url,
                      ", ".join("%s: %s" % (str(k), str(v))
                                for k, v in global_.items()))


def _set_config(monitoring):
    del monitoring


def _get_handlers(monitoring):
    """
    Output the set of logging handlers from the given monitoring

    @param[in] monitoring the object returned by _connect()
    """
    result = _get_raw_config(monitoring)
    for url in result:
        data = result[url]
        handlers = data['handlers']
        for handler in sorted(handlers, key=lambda x: x['name']):
            name = handler['name']
            del handler['name']
            bxilog.output("%s/handler-name='%s': %s",
                          str(url),
                          str(name),
                          ", ".join("%s: %s" % (str(k), str(v))
                                    for k, v in handler.items()))

def _get_loggers(monitoring):
    """
    Output the set of loggers from the given monitoring

    @param[in] monitoring the object returned by _connect()
    @param[in] args arguments from the command line parser
    """
    result = _get_raw_config(monitoring)
    for url in result:
        data = result[url]
        loggers = data['loggers']
        for logger in sorted(loggers, key=lambda x: x['name']):
            name = logger['name']
            del logger['name']
            bxilog.output("%s/logger-name='%s': %s", str(url), str(name),
                          ", ".join("%s: %s" % (str(k), str(v))
                                    for k, v in logger.items()))

def _monitor(monitoring, args):
    """
    Monitor the logs from the given monitoring

    @note this function never returns

    @param[in] monitoring the object returned by _connect()
    @param[in] args arguments from the command line parser
    """

    bxilog.info("Monitoring configuration %s", monitoring.keys())
    result = _get_raw_config(monitoring)
    urls = []
    for ctrl_url in result:
        data = result[ctrl_url]
        urls.append(str(data['global']['ctrl_url']))
    receiver = remote_receiver.RemoteReceiver(urls, bind=args.bind)
    receiver.start()
    # Do something better here! Instead of sleeping
    time.sleep(2 ** 32)


_ACTIONS = {'get-config': _get_config,
            'get-handlers': _get_handlers,
            'get-loggers': _get_loggers,
            'monitor': _monitor,}


def __main__():
    formatter = bxiparserconf.RawDescriptionFilteredHelpFormatter
    parser = posless.ArgumentParser(docstring=__doc__,
                                    formatter_class=formatter)
    parser.add_argument("action", nargs='?',
                        choices=_ACTIONS.keys(),
                        const='monitor',
                        default='monitor')
    parser.add_argument("bxilog_remote_handler_url", type=str, nargs='+',
                        help="The remote handler url to monitor.")

    parser.add_argument("--bind", action='store_true',
                        help='Bind to the url instead of connect')

    bxiparserconf.addargs(parser, domain_name='log')

    args_ = parser.parse_args()

    monitoring_ = _connect(args_)

    _ACTIONS[args_.action](monitoring_, args_)

if __name__ == "__main__":
    __main__()
