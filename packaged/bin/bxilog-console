#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
@file bxilog-console
@authors Pierre Vignéras <pierre.vigneras@bull.net>
@copyright 2013  Bull S.A.S.  -  All rights reserved.\n
           This is not Free or Open Source software.\n
           Please contact Bull SAS for details about its license.\n
           Bull - Rue Jean Jaurès - B.P. 68 - 78340 Les Clayes-sous-Bois
@namespace bxilog-console Monitoring console of a bxilog process

"""

import os,sys
import zmq
import bxi.base.log as bxilog
import bxi.base.posless as posless
import bxi.base.parserconf as bxiparserconf


def _connect(args):
    ctx = zmq.Context.instance()
    monitoring = dict()
    for url in args.bxilog_remote_handler_url:
        zock = ctx.socket(zmq.DEALER)
        if args.bind:
            zock.bind(url)
        else:
            zock.connect(url)
        monitoring[url] = (zock, None)
    return monitoring


def _get_config(monitoring):
    bxilog.info("Getting configuration of %s", monitoring.keys())
    
    for url in monitoring:
        ctrl_zock = monitoring[url][0]
        ctrl_zock.send_string('get-config')
        data = ctrl_zock.recv_json()
        global_ = data['global']
        handlers = data['handlers']
        loggers = data['loggers']
        bxilog.output("Global: %s",
                      ", ".join("%s: %s" % (str(k), str(v)) for k,v in global_.items()))
        for handler in sorted(handlers, key=lambda x: x['name']):
            name = handler['name']
            del handler['name']
            bxilog.output("Handler '%s': %s",
                          str(name),
                          ", ".join("%s: %s" % (str(k), str(v)) for k,v in handler.items()))
        for logger in sorted(loggers, key=lambda x: x['name']):
            name = logger['name']
            del logger['name']
            bxilog.output("Logger '%s': %s",
                          str(name),
                          ", ".join("%s: %s" % (str(k), str(v)) for k,v in logger.items()))


def _set_config(monitoring):
    pass


def _get_loggers(monitoring):
    pass


def _monitor(monitoring):
    bxilog.info("Monitoring configuration %s", monitoring.keys())
    pass

_ACTIONS={'get-config': _get_config,
          'set-config': _set_config,
          'get-loggers': _get_loggers,
          'monitor': _monitor,
          }

if __name__ == '__main__':

    parser = posless.ArgumentParser(description='BXI Log Console',
                                    formatter_class=bxiparserconf.FilteredHelpFormatter)
    parser.add_argument("action", nargs='?',
                        choices=_ACTIONS.keys(),
                        const='monitor',
                        default='monitor')
    parser.add_argument("bxilog_remote_handler_url", type=str, nargs='+',
                        help="The remote handler url to monitor.")
    
    parser.add_argument("--bind", action='store_true', 
                       help='Bind to the url instead of connect')
    
    bxiparserconf.addargs(parser, domain_name='log')

    args = parser.parse_args()
    
    monitoring = _connect(args)
    
    _ACTIONS[args.action](monitoring)
    
    